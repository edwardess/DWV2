rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is a project member
    function isProjectMember(projectId) {
      return request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberIds;
    }
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow users to read and write their own documents
      allow read, write: if isOwner(userId);
      
      // Notifications subcollection rules
      match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow read: if isOwner(userId);
        
        // Only allow writing if the user is a member of the project
        // This protects against users creating fake notifications
        allow create: if isOwner(userId) && isProjectMember(request.resource.data.projectId);
        
        // Allow users to mark notifications as read, but not modify other fields
        allow update: if isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']) &&
          request.resource.data.read == true;
        
        // Allow deletion of user's own notifications
        allow delete: if isOwner(userId);
      }
    }
    
    // Legacy notifications rules (for backward compatibility)
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isProjectMember(resource.data.projectId);
      allow create: if isAuthenticated() && isProjectMember(request.resource.data.projectId);
      allow update: if isAuthenticated() 
        && isProjectMember(resource.data.projectId)
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      allow delete: if false; // Notifications cannot be deleted
    }
    
    // Legacy read status rules (for backward compatibility)
    match /notificationReadStatus/{statusId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow delete: if false;
    }
    
    // Projects rules
    match /projects/{projectId} {
      // Project members can read project data
      allow read: if isAuthenticated() && isProjectMember(projectId);
      
      // Write operations have their own specific rules
      // (typically handled through Cloud Functions or Admin SDK)
      // This is just a placeholder - adjust according to your actual requirements
      allow write: if isAuthenticated() && isProjectMember(projectId);
    }
  }
} 